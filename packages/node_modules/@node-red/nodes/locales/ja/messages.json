{
    "common": {
        "label": {
            "payload": "ペイロード",
            "topic": "トピック",
            "name": "名前",
            "username": "ユーザ名",
            "password": "パスワード",
            "property": "プロパティ",
            "selectNodes": "ノードを選択...",
            "expand": "展開"
        },
        "status": {
            "connected": "接続済",
            "not-connected": "未接続",
            "disconnected": "切断",
            "connecting": "接続中",
            "error": "エラー",
            "ok": "OK"
        },
        "notification": {
            "error": "<strong>エラー</strong>: __message__",
            "errors": {
                "not-deployed": "ノードがデプロイされていません",
                "no-response": "サーバの応答がありません",
                "unexpected": "想定外のエラー (__status__) __message__"
            }
        },
        "errors": {
            "nooverride": "警告: メッセージで設定したプロパティは、ノードのプロパティを上書きできません。詳細はbit.ly/nr-override-msg-propsを参照してください。"
        }
    },
    "inject": {
        "inject": "inject",
        "injectNow": "inject実行",
        "repeat": "repeat = __repeat__",
        "crontab": "crontab = __crontab__",
        "stopped": "stopped",
        "failed": "inject失敗: __error__",
        "label": {
            "properties": "プロパティ",
            "repeat": "繰り返し",
            "flow": "フローコンテクスト",
            "global": "グローバルコンテクスト",
            "str": "文字列",
            "num": "数値",
            "bool": "真偽値",
            "json": "オブジェクト",
            "bin": "バッファ",
            "date": "タイムスタンプ",
            "env": "環境変数",
            "object": "オブジェクト",
            "string": "文字列",
            "boolean": "真偽値",
            "number": "数値",
            "Array": "配列",
            "invalid": "不正なJSON"
        },
        "timestamp": "タイムスタンプ",
        "none": "なし",
        "interval": "指定した時間間隔",
        "interval-time": "指定した時間間隔、日時",
        "time": "指定した日時",
        "seconds": "秒",
        "minutes": "分",
        "hours": "時間",
        "between": "時刻",
        "previous": "前回の値",
        "at": "時刻",
        "and": "～",
        "every": "時間間隔",
        "days": [
            "月曜日",
            "火曜日",
            "水曜日",
            "木曜日",
            "金曜日",
            "土曜日",
            "日曜日"
        ],
        "on": "曜日",
        "onstart": "Node-RED起動の",
        "onceDelay": "秒後、以下を行う",
        "success": "inject処理を実行しました: __label__",
        "errors": {
            "failed": "inject処理が失敗しました。詳細はログを確認してください。",
            "toolong": "時間間隔が大き過ぎます",
            "invalid-expr": "JSONata式が不正: __error__",
            "invalid-jsonata": "__prop__: プロパティ式が不正: __error__",
            "invalid-prop": "__prop__: プロパティ式が不正: __error__",
            "invalid-json": "__prop__: JSONデータが不正: __error__",
            "invalid-repeat": "繰り返し数が不正"
        }
    },
    "catch": {
        "catch": "catch: 全て",
        "catchGroup": "catch: グループ",
        "catchNodes": "catch: __number__",
        "catchUncaught": "catch: 未補足",
        "label": {
            "source": "エラー取得元",
            "selectAll": "全て選択",
            "uncaught": "Catchノードで処理済みのエラーを無視"
        },
        "scope": {
            "all": "全てのノード",
            "group": "同一グループ内",
            "selected": "選択したノード"
        }
    },
    "status": {
        "status": "status: 全て",
        "statusGroup": "status: グループ",
        "statusNodes": "status: __number__",
        "label": {
            "source": "ステータス取得元",
            "sortByType": "型で並べ替え"
        },
        "scope": {
            "all": "全てのノード",
            "group": "同一グループ内",
            "selected": "選択したノード"
        }
    },
    "complete": {
        "completeNodes": "complete: __number__",
        "errors": {
            "scopeUndefined": "スコープが未定義"
        }
    },
    "debug": {
        "output": "対象",
        "status": "ステータス",
        "none": "無し",
        "invalid-exp": "JSONata式が不正: __error__",
        "msgprop": "メッセージプロパティ",
        "msgobj": "msgオブジェクト全体",
        "autostatus": "デバッグ出力と同じ",
        "messageCount": "メッセージ数をカウント",
        "to": "出力先",
        "debtab": "デバッグタブ",
        "tabcon": "デバッグタブとコンソール",
        "toSidebar": "デバッグウィンドウ",
        "toConsole": "システムコンソール",
        "toStatus": "ノードステータス(32 文字)",
        "severity": "Level",
        "node": "ノード",
        "notification": {
            "activated": "有効化しました: __label__",
            "deactivated": "無効化しました: __label__"
        },
        "sidebar": {
            "label": "デバッグ",
            "name": "デバッグメッセージ",
            "filterAll": "全てのフロー",
            "filterSelected": "選択したノード",
            "filterCurrent": "現在のフロー",
            "debugNodes": "debugノード",
            "clearLog": "ログを削除",
            "clearFilteredLog": "選択したメッセージを削除",
            "filterLog": "ログのフィルタリング",
            "openWindow": "新しいウィンドウで開く",
            "copyPath": "パスをコピー",
            "copyPayload": "値をコピー",
            "pinPath": "展開を固定",
            "selectAll": "全てを選択",
            "selectNone": "選択を外す",
            "all": "全て",
            "filtered": "選択したメッセージ"
        },
        "messageMenu": {
            "collapseAll": "全パスを折りたたむ",
            "clearPinned": "選択したパス",
            "filterNode": "ノードをフィルタ",
            "clearFilter": "フィルタを初期化"
        }
    },
    "link": {
        "linkIn": "link in",
        "linkOut": "link out",
        "linkCall": "link call",
        "linkOutReturn": "link return",
        "outMode": "モード",
        "sendToAll": "接続された全てのlinkノードへ送信",
        "returnToCaller": "link callノードへ返却",
        "timeout": "タイムアウト",
        "linkCallType": "リンクの種類",
        "staticLinkCall": "対象を固定で指定",
        "dynamicLinkCall": "対象を動的に指定 (msg.target)",
        "dynamicLinkLabel": "動的",
        "errors": {
            "missingReturn": "返却するノードの情報が存在しません",
            "linkUndefined": "リンクが未定義"
        }
    },
    "tls": {
        "tls": "TLS設定",
        "label": {
            "use-local-files": "ローカルファイルの秘密鍵と証明書を使用",
            "upload": "ファイル",
            "cert": "証明書",
            "key": "秘密鍵",
            "passphrase": "パスフレーズ",
            "ca": "CA証明書",
            "verify-server-cert": "サーバ証明書を確認",
            "servername": "サーバ名",
            "alpnprotocol": "ALPNプロトコル"
        },
        "placeholder": {
            "cert": "証明書(PEM形式)のパス",
            "key": "秘密鍵(PEM形式)のパス",
            "ca": "CA証明書(PEM形式)のパス",
            "passphrase": "秘密鍵のパスフレーズ (任意)",
            "servername": "SNIで使用",
            "alpnprotocol": "ALPNで使用"
        },
        "error": {
            "missing-file": "証明書と秘密鍵のファイルが設定されていません",
            "invalid-cert": "証明書が指定されていません",
            "invalid-key": "秘密鍵が指定されていません"
        }
    },
    "exec": {
        "exec": "exec",
        "spawn": "spawn",
        "label": {
            "command": "コマンド",
            "append": "引数",
            "timeout": "タイムアウト",
            "timeoutplace": "任意",
            "return": "出力",
            "seconds": "秒",
            "stdout": "標準出力",
            "stderr": "標準エラー出力",
            "retcode": "返却コード",
            "winHide": "コンソールを非表示"
        },
        "placeholder": {
            "extraparams": "追加引数"
        },
        "opt": {
            "exec": "コマンド終了時 - execモード",
            "spawn": "コマンド実行中 - spawnモード"
        },
        "oldrc": "旧型式の出力を使用(互換モード)"
    },
    "function": {
        "function": "",
        "label": {
            "setup": "設定",
            "function": "コード",
            "initialize": "初期化処理",
            "finalize": "終了処理",
            "outputs": "出力数",
            "modules": "モジュール",
            "timeout": "タイムアウト"
        },
        "text": {
            "initialize": "// ここに記述したコードは、ノードをデプロイした時に\n// 一度だけ実行されます。\n",
            "finalize": "// ここに記述したコードは、ノードを停止したとき\n// もしくは再デプロイしたときに実行されます。\n"
        },
        "require": {
            "var": "変数",
            "module": "モジュール",
            "moduleName": "モジュール名",
            "importAs": "インポート名"
        },
        "error": {
            "externalModuleNotAllowed": "Functionノードは、外部モジュールを読み込みできません",
            "moduleNotAllowed": "モジュール __module__ は利用できません",
            "externalModuleLoadError": "Functionノードは、外部モジュールの読み込みに失敗しました",
            "moduleLoadError": "モジュール __module__ の読み込みに失敗しました: __error__",
            "moduleNameError": "モジュール変数名が不正です: __name__",
            "moduleNameReserved": "予約された変数名です: __name__",
            "inputListener": "コード内で'input'イベントのリスナを設定できません",
            "non-message-returned": "Functionノードが __type__ 型のメッセージ送信を試みました",
            "invalid-js": "JavaScriptコードのエラー",
            "missing-module": "モジュール __module__ が存在しません"
        }
    },
    "template": {
        "template": "template",
        "label": {
            "template": "テンプレート",
            "property": "プロパティ",
            "format": "構文",
            "syntax": "形式",
            "output": "出力形式",
            "mustache": "Mustacheテンプレート",
            "plain": "平文",
            "json": "JSON",
            "yaml": "YAML",
            "none": "なし"
        },
        "templatevalue": "This is the payload: {{payload}} !"
    },
    "delay": {
        "action": "動作",
        "for": "時間",
        "delaymsg": "メッセージの遅延",
        "delayfixed": "指定した時間遅延",
        "delayvarmsg": "msg.delay に遅延を設定",
        "randomdelay": "ランダム時間の遅延",
        "limitrate": "メッセージの流量制限",
        "limitall": "全てのメッセージ",
        "limittopic": "msg.topic毎",
        "fairqueue": "指定した時間後にキュー先頭のトピックのメッセージを出力",
        "timedqueue": "指定した時間後にキューにある全トピックのメッセージを出力",
        "milisecs": "ミリ秒",
        "secs": "秒",
        "sec": "秒",
        "mins": "分",
        "min": "分",
        "hours": "時間",
        "hour": "時間",
        "days": "日",
        "day": "日",
        "between": "範囲",
        "and": "〜",
        "rate": "流量",
        "msgper": "メッセージ／",
        "queuemsg": "中間メッセージをキューに追加",
        "dropmsg": "中間メッセージを削除",
        "sendmsg": "2番目の出力で中間メッセージを送信",
        "allowrate": "msg.rate(ミリ秒単位)で流量値を上書き",
        "label": {
            "delay": "delay",
            "variable": "variable",
            "limit": "limit",
            "limitTopic": "limit topic",
            "random": "random",
            "rate": "流量",
            "random-first": "ランダム最小値",
            "random-last": "ランダム最大値",
            "units": {
                "second": {
                    "plural": "秒",
                    "singular": "秒"
                },
                "minute": {
                    "plural": "分",
                    "singular": "分"
                },
                "hour": {
                    "plural": "時間",
                    "singular": "時間"
                },
                "day": {
                    "plural": "日",
                    "singular": "日"
                }
            }
        },
        "errors": {
            "too-many": "delayノード内で保持しているメッセージが多すぎます",
            "invalid-timeout": "遅延時間が不正",
            "invalid-rate": "流量値が不正",
            "invalid-rate-unit": "流量単位時間が不正",
            "invalid-random-first": "ランダム最小値が不正",
            "invalid-random-last": "ランダム最大値が不正"
        }
    },
    "trigger": {
        "send": "送信データ",
        "then": "送信後の処理",
        "then-send": "再送信データ",
        "output": {
            "string": "文字列",
            "number": "数値",
            "existing": "存在するmsgオブジェクト",
            "original": "元のmsgオブジェクト",
            "latest": "最新のmsgオブジェクト",
            "nothing": "なし"
        },
        "wait-reset": "初期化されるまで待機",
        "wait-for": "指定した時間待機",
        "wait-loop": "指定した時間間隔毎に送信を繰り返す",
        "for": "処理対象",
        "bytopics": "毎",
        "alltopics": "全メッセージ",
        "duration": {
            "ms": "ミリ秒",
            "s": "秒",
            "m": "分",
            "h": "時間"
        },
        "extend": "新たなメッセージを受け取った時に遅延を延長",
        "override": "msg.delayを用いて遅延時間を上書き",
        "second": "2つ目の出力端子に2番目のメッセージを送信",
        "label": {
            "trigger": "trigger",
            "trigger-block": "trigger & block",
            "trigger-loop": "resend every",
            "reset": "初期化条件:",
            "resetMessage": "msg.resetを設定",
            "resetPayload": "msg.payloadが次の値",
            "resetprompt": "任意",
            "duration": "時間間隔",
            "topic": "トピック"
        }
    },
    "comment": {
        "comment": "comment"
    },
    "unknown": {
        "label": {
            "unknown": "unknown"
        },
        "tip": "<p>現在のNode-RED環境では、本ノードの型が不明です。</p><p><i>現在の状態で本ノードをデプロイすると設定は保存されますが、不明なノードがインストールされるまでフローは実行されません。</i></p><p>詳細はノードの「情報」を参照してください。</p>"
    },
    "mqtt": {
        "label": {
            "broker": "サーバ",
            "example": "例) localhost",
            "output": "出力",
            "qos": "QoS",
            "retain": "保持",
            "clientid": "クライアント",
            "port": "ポート",
            "keepalive": "キープアライブ時間",
            "cleansession": "セッションの初期化",
            "autoUnsubscribe": "切断時に購読を自動解除",
            "cleanstart": "クリーンスタート",
            "use-tls": "TLSを使用",
            "tls-config": "TLS設定",
            "verify-server-cert": "サーバの証明書を確認",
            "compatmode": "旧MQTT 3.1のサポート",
            "userProperties": "ユーザプロパティ",
            "subscriptionIdentifier": "サブスクリプションID",
            "flags": "フラグ",
            "nl": "このクライアントでパブリッシュされたメッセージを受信しない",
            "rap": "元のパブリッシュのretainフラグを保存する",
            "rh": "Retainメッセージ処理",
            "rh0": "Retainメッセージを送信",
            "rh1": "新しいサブスクリプションのみ送信",
            "rh2": "送信しない",
            "responseTopic": "返信トピック",
            "contentType": "コンテントタイプ",
            "correlationData": "コリレーション",
            "expiry": "有効期限 (秒)",
            "sessionExpiry": "セッション有効期限 (秒)",
            "topicAlias": "別名",
            "payloadFormatIndicator": "形式",
            "payloadFormatIndicatorFalse": "未指定バイト (デフォルト)",
            "payloadFormatIndicatorTrue": "UTF-8エンコードペイロード",
            "protocolVersion": "プロトコル",
            "protocolVersion3": "MQTT V3.1 (旧版)",
            "protocolVersion4": "MQTT V3.1.1",
            "protocolVersion5": "MQTT V5",
            "topicAliasMaximum": "最大別名数",
            "maximumPacketSize": "最大パケット長",
            "receiveMaximum": "最大受信数",
            "session": "セッション",
            "delay": "遅延",
            "action": "動作",
            "staticTopic": "1つのトピックを購読",
            "dynamicTopic": "動的な購読",
            "auto-connect": "自動接続",
            "auto-mode-depreciated": "本オプションは非推奨になりました。新しい自動判定モードを使用してください。",
            "none": "なし",
            "other": "その他"
        },
        "sections-label": {
            "birth-message": "接続時の送信メッセージ(Birthメッセージ)",
            "will-message": "予期しない切断時の送信メッセージ(Willメッセージ)",
            "close-message": "切断前の送信メッセージ(Closeメッセージ)"
        },
        "tabs-label": {
            "connection": "接続",
            "security": "セキュリティ",
            "messages": "メッセージ"
        },
        "placeholder": {
            "clientid": "IDを自動生成する場合は、無記入にしてください",
            "clientid-nonclean": "新規ではないセッションを設定してください",
            "will-topic": "Willメッセージを無効化する場合は、無記入にしてください",
            "birth-topic": "Birthメッセージを無効化する場合は、無記入にしてください",
            "close-topic": "Closeメッセージを無効化する場合は、無記入にしてください"
        },
        "state": {
            "connected": "ブローカへ接続しました: __broker__",
            "disconnected": "ブローカから切断されました: __broker__",
            "connect-failed": "ブローカへの接続に失敗しました: __broker__",
            "broker-disconnected": "ブローカ __broker__ がクライアントを切断しました: __reasonCode__ __reasonString__"
        },
        "retain": "保持",
        "output": {
            "buffer": "バイナリバッファ",
            "string": "文字列",
            "base64": "Base64文字列",
            "auto": "自動判定(文字列もしくはバイナリバッファ)",
            "auto-detect": "自動判定(JSONオブジェクト、文字列もしくはバイナリバッファ)",
            "json": "JSONオブジェクト"
        },
        "true": "する",
        "false": "しない",
        "tip": "注釈: トピックやQoSをメッセージのプロパティを用いて設定する場合は、無記入にしてください。",
        "errors": {
            "not-defined": "トピックが設定されていません",
            "missing-config": "ブローカが設定されていません",
            "invalid-topic": "不正なトピックが設定されています",
            "nonclean-missingclientid": "「セッションの初期化」使用時に、クライアントIDが設定されていません",
            "invalid-json-string": "不正なJSON文字列",
            "invalid-json-parse": "JSON文字列のパースに失敗しました",
            "invalid-action-action": "指定された動作が不正です",
            "invalid-action-alreadyconnected": "接続する前にブローカから切断してください",
            "invalid-action-badsubscription": "msg.topicが存在しないか不正です",
            "invalid-client-id": "クライアントIDが未指定"
        }
    },
    "httpin": {
        "label": {
            "method": "メソッド",
            "url": "URL",
            "doc": "ドキュメント",
            "return": "出力形式",
            "upload": "ファイルのアップロード",
            "status": "ステータスコード",
            "headers": "ヘッダ",
            "other": "その他",
            "paytoqs": {
                "ignore": "無視",
                "query": "クエリパラメータに追加",
                "body": "リクエストボディとして送信"
            },
            "utf8String": "UTF8文字列",
            "binaryBuffer": "バイナリバッファ",
            "jsonObject": "JSONオブジェクト",
            "authType": "種別",
            "bearerToken": "トークン"
        },
        "setby": "- msg.methodに定義 -",
        "basicauth": "認証を使用",
        "use-tls": "SSL/TLS接続を有効化",
        "tls-config": "TLS設定",
        "basic": "Basic認証",
        "digest": "Digest認証",
        "bearer": "Bearer認証",
        "use-proxy": "プロキシを使用",
        "persist": "コネクションkeep-aliveを有効化",
        "proxy-config": "プロキシ設定",
        "use-proxyauth": "プロキシ認証を使用",
        "noproxy-hosts": "例外ホスト",
        "senderr": "2xx以外の応答をcatchノードへ送信",
        "utf8": "UTF8文字列",
        "binary": "バイナリバッファ",
        "json": "JSONオブジェクト",
        "tip": {
            "in": "URLは相対パスになります。",
            "res": "本ノードに送付するメッセージは、<i>http input</i>ノードを起点としてください。",
            "req": "注釈: JSONの構文解析に失敗した場合は、取得した文字列をそのまま出力します。"
        },
        "httpreq": "http request",
        "errors": {
            "not-created": "httpNodeRootにfalseが設定されている時は、http-inノードを作成できません",
            "missing-path": "パスが設定されていません",
            "no-response": "応答がありません",
            "json-error": "JSONの構文解析エラー",
            "no-url": "URLが設定されていません",
            "deprecated-call": "非推奨の呼び出しです __method__",
            "invalid-transport": "httpでないトランスポートが要求されました",
            "timeout-isnan": "タイムアウト値が数値ではないため無視します",
            "timeout-isnegative": "タイムアウト値が負数のため無視します",
            "invalid-payload": "不正なペイロード",
            "invalid-url": "URLが不正"
        },
        "status": {
            "requesting": "要求中"
        },
        "insecureHTTPParser": "厳密なHTTPパース処理を無効化"
    },
    "websocket": {
        "label": {
            "type": "種類",
            "path": "パス",
            "url": "URL",
            "subprotocol": "サブプロトコル"
        },
        "listenon": "待ち受け",
        "connectto": "接続",
        "sendrec": "送信/受信",
        "payload": "ペイロードを送信/受信",
        "message": "メッセージ全体を送信/受信",
        "sendheartbeat": "ハートビートを送信",
        "tip": {
            "path1": "標準では <code>payload</code> がwebsocketから送信、受信されるデータを持ちます。クライアントはJSON形式の文字列としてメッセージ全体を送信、受信するよう設定できます。",
            "path2": "このパスは <code>__path__</code> の相対パスになります。",
            "url1": "URLには ws:&#47;&#47; または wss:&#47;&#47; スキーマを使用して、存在するwebsocketリスナを設定してください。",
            "url2": "標準では <code>payload</code> がwebsocketから送信、受信されるデータを持ちます。クライアントはJSON形式の文字列としてメッセージ全体を送信、受信するよう設定できます。",
            "headers": "ヘッダーは、HTTP から WS/WSS プロトコルへのプロトコル アップグレード メカニズム中にのみ送信されます。"
        },
        "status": {
            "connected": "接続数 __count__",
            "connected_plural": "接続数 __count__"
        },
        "errors": {
            "connect-error": "ws接続でエラーが発生しました: ",
            "send-error": "送信中にエラーが発生しました: ",
            "missing-conf": "サーバ設定が不足しています",
            "duplicate-path": "同じパスに対して2つのWebSocketリスナは指定できません: __path__",
            "missing-server": "サーバが設定されていません",
            "missing-client": "クライアントが設定されていません"
        }
    },
    "watch": {
        "watch": "watch",
        "label": {
            "files": "ファイル",
            "recursive": "サブディレクトリを再帰的に監視"
        },
        "placeholder": {
            "files": "複数のファイルやディレクトリはコンマ区切りで入力"
        },
        "tip": "Windowsの場合は、ディレクトリの区切り文字として2つのバックスラッシュ \\\\ を使用してください。"
    },
    "tcpin": {
        "label": {
            "type": "種類",
            "output": "出力",
            "port": "ポート",
            "host": "ホスト",
            "payload": "のペイロード",
            "delimited": "区切り文字",
            "close-connection": "メッセージを送信するたびに接続を切断",
            "decode-base64": "Base64メッセージの復号",
            "server": "サーバ",
            "return": "戻り値",
            "ms": "ミリ秒",
            "chars": "文字",
            "close": "終了",
            "optional": "(任意)",
            "reattach": "区切り文字を再追加"
        },
        "type": {
            "listen": "待ち受け",
            "connect": "接続",
            "reply": "TCP応答"
        },
        "output": {
            "stream": "ストリーム",
            "single": "単一",
            "buffer": "バイナリバッファ",
            "string": "文字列",
            "base64": "Base64文字列"
        },
        "return": {
            "timeout": "指定時間後",
            "character": "指定文字の受信時",
            "number": "指定数の文字列",
            "never": "なし - 接続を維持",
            "immed": "即時 - 応答を待たない"
        },
        "status": {
            "connecting": "__host__:__port__ へ接続しています",
            "connected": "__host__:__port__ へ接続しました",
            "listening-port": "ポート __port__ にて接続を待ち受けています",
            "stopped-listening": "ポートの待ち受けを停止しました",
            "connection-from": "__host__:__port__ から接続されました",
            "connection-closed": "__host__:__port__ からの接続が切断されました",
            "connections": "接続数 __count__",
            "connections_plural": "接続数 __count__"
        },
        "errors": {
            "connection-lost": "__host__:__port__ への接続が失われました",
            "timeout": "ポート __port__ のソケットがタイムアウトにより切断されました",
            "cannot-listen": "ポート __port__ の待ち受けができません エラー: __error__",
            "error": "エラー: __error__",
            "socket-error": "__host__:__port__ にてソケットのエラーが生じました",
            "no-host": "ホスト名またはポートが設定されていません",
            "connect-timeout": "接続がタイムアウトしました",
            "connect-fail": "接続に失敗しました",
            "bad-string": "文字列への変換に失敗しました",
            "invalid-host": "ホスト名が不正",
            "invalid-port": "ポートが不正"
        }
    },
    "udp": {
        "label": {
            "listen": "待ち受け",
            "onport": "ポート",
            "using": "種類",
            "output": "出力",
            "group": "グループ",
            "interface": "ローカルIP",
            "send": "送信",
            "toport": "ポート",
            "address": "アドレス",
            "decode-base64": "Base64形式のペイロードを復号",
            "port": "ポート"
        },
        "placeholder": {
            "interface": "(任意) 使用するローカルインターフェイスもしくはアドレス",
            "interfaceprompt": "(任意) 使用するローカルインターフェイスもしくはアドレス",
            "address": "宛先IPアドレス"
        },
        "udpmsgs": "UDPメッセージ",
        "mcmsgs": "マルチキャストメッセージ",
        "udpmsg": "UDPメッセージ",
        "bcmsg": "ブロードキャストメッセージ",
        "mcmsg": "マルチキャストメッセージ",
        "output": {
            "buffer": "バイナリバッファ",
            "string": "文字列",
            "base64": "Base64文字列"
        },
        "bind": {
            "random": "ローカルポートをランダムに使用",
            "local": "ローカルポートを使用",
            "target": "指定したポートを使用"
        },
        "tip": {
            "in": "注釈: ファイアウォールが通信を許可しているか確認してください。",
            "out": "注釈: <code>msg.ip</code> や <code>msg.port</code> を用いて設定する場合は、「アドレス」や「ポート」を無記入にしてください。",
            "port": "既にポートが使用されています: "
        },
        "status": {
            "listener-at": "udpノードが __host__:__port__ にて接続を待ち受けています",
            "mc-group": "udpノードがグループ __group__ へマルチキャストしました",
            "listener-stopped": "udpノードが待ち受けを停止しました",
            "output-stopped": "udpノードが出力を停止しました",
            "mc-ready": "udpノードはマルチキャストの準備ができています: __iface__:__outport__ -> __host__:__port__",
            "bc-ready": "udpノードはブロードキャストの準備ができています: __outport__ -> __host__:__port__",
            "ready": "udpノードは準備ができています: __outport__ -> __host__:__port__",
            "ready-nolocal": "udpノードは準備ができています: __host__:__port__",
            "re-use": "udp再利用ソケット: __outport__ -> __host__:__port__"
        },
        "errors": {
            "access-error": "UDP接続エラー 管理者権限で1024未満のポート番号にアクセスできる必要があります",
            "error": "エラー: __error__",
            "bad-mcaddress": "マルチキャストアドレスが不正です",
            "interface": "インターフェイスのIPアドレスを設定する必要があります",
            "ip-notset": "udp: IPアドレスが設定されていません",
            "port-notset": "udp: ポートが設定されていません",
            "port-invalid": "udp: ポート番号が不正です",
            "alreadyused": "udp: 既に__port__番ポートが使用されています",
            "ifnotfound": "udp: インターフェイス __iface__ がありません",
            "invalid-group": "マルチキャストグループが不正"
        }
    },
    "switch": {
        "switch": "switch",
        "label": {
            "property": "プロパティ",
            "rule": "条件",
            "repair": "メッセージ列の補正",
            "value-rules": "値ルール",
            "sequence-rules": "列ルール"
        },
        "previous": "前回の値",
        "and": "～",
        "checkall": "全ての条件を適用",
        "stopfirst": "最初に合致した条件で終了",
        "ignorecase": "大文字、小文字を区別しない",
        "rules": {
            "btwn": "範囲内である",
            "cont": "要素に含む",
            "regex": "正規表現にマッチ",
            "true": "trueである",
            "false": "falseである",
            "null": "nullである",
            "nnull": "nullでない",
            "istype": "指定型である",
            "empty": "空である",
            "nempty": "空でない",
            "head": "先頭要素である",
            "tail": "末尾要素である",
            "index": "指定添字範囲要素である",
            "exp": "JSONata式",
            "else": "その他",
            "hask": "キーを含む"
        },
        "errors": {
            "invalid-expr": "不正な表現: __error__",
            "too-many": "switchノード内で保持しているメッセージが多すぎます"
        }
    },
    "change": {
        "label": {
            "rules": "ルール",
            "rule": "ルール",
            "set": "set __property__",
            "change": "change __property__",
            "delete": "delete __property__",
            "move": "move __property__",
            "changeCount": "change: __count__ rules",
            "regex": "正規表現を使用",
            "deepCopy": "値のディープコピー"
        },
        "action": {
            "set": "値の代入",
            "change": "値の置換",
            "delete": "値の削除",
            "move": "値の移動",
            "toValue": "代入する値",
            "to": "移動先",
            "search": "検索する文字列",
            "replace": "置換後の文字列"
        },
        "errors": {
            "invalid-from": "操作対象のプロパティが不正: __error__",
            "invalid-json": "対象の値のJSONプロパティが不正",
            "invalid-expr": "JSONata式が不正: __error__",
            "no-override": "オブジェクト型でないプロパティを設定できません: __property__",
            "invalid-prop": "プロパティ式が不正: __property__",
            "invalid-json-data": "JSONデータが不正: __error__"
        }
    },
    "range": {
        "range": "range",
        "label": {
            "action": "動作",
            "inputrange": "入力値の範囲",
            "resultrange": "出力値の範囲",
            "from": "最小値",
            "to": "最大値",
            "roundresult": "小数値を四捨五入し整数値へ変換",
            "minin": "入力最小値",
            "maxin": "入力最大値",
            "minout": "出力最小値",
            "maxout": "出力最大値"
        },
        "placeholder": {
            "min": "例) 0",
            "maxin": "例) 99",
            "maxout": "例) 255"
        },
        "scale": {
            "payload": "msg.payloadの値を拡大/縮小",
            "limit": "入力値の範囲外の値を最小値/最大値とし拡大/縮小",
            "wrap": "入力値の範囲外の値を範囲幅で割った余りとし拡大/縮小",
            "drop": "値を拡大/縮小(入力範囲外の時はメッセージを削除)"
        },
        "tip": "注釈: 本ノードは、数値のみ扱うことができます。",
        "errors": {
            "notnumber": "数値ではありません"
        }
    },
    "csv": {
        "label": {
            "columns": "列名",
            "separator": "区切り文字",
            "c2o": "CSVからオブジェクトへ変換",
            "o2c": "オブジェクトからCSVへ変換",
            "input": "入力",
            "skip-s": "最初の",
            "skip-e": "行を無視する",
            "firstrow": "1行目に列名を含む",
            "output": "出力",
            "includerow": "1行目を列名とする",
            "newline": "改行コード",
            "usestrings": "数値を変換する",
            "include_empty_strings": "空の文字を含む",
            "include_null_values": "null値を含む",
            "spec": "パーサ"
        },
        "spec": {
            "rfc": "RFC4180",
            "legacy": "従来",
            "legacy_warning": "従来モードは将来のリリースで削除される予定です"
        },
        "placeholder": {
            "columns": "コンマ区切りで列名を入力"
        },
        "separator": {
            "comma": "コンマ",
            "tab": "タブ",
            "space": "空白",
            "semicolon": "セミコロン",
            "colon": "コロン",
            "hashtag": "ハッシュタグ",
            "other": "その他..."
        },
        "output": {
            "row": "行毎にメッセージを分割",
            "array": "配列化した1つのメッセージ"
        },
        "newline": {
            "linux": "Linux (\\n)",
            "mac": "Mac (\\r)",
            "windows": "Windows (\\r\\n)"
        },
        "hdrout": {
            "none": "カラムヘッダを送信しない",
            "all": "カラムヘッダを常に送信する",
            "once": "ヘッダを一度だけ送信する(msg.resetの受け付けると再送)"
        },
        "errors": {
            "bad_template": "不正な列テンプレート",
            "csv_js": "本ノードが処理できる形式は、CSV文字列またはJSONのみです",
            "obj_csv": "オブジェクトをCSVへ変換する際の列名が設定されていません",
            "bad_csv": "不正なCSVデータ - 出力の修正を試みました"
        }
    },
    "html": {
        "label": {
            "select": "抽出する要素",
            "output": "出力",
            "in": "対象:",
            "prefix": "HTMLコンテンツのプロパティ名"
        },
        "output": {
            "html": "要素内のHTML",
            "text": "要素のテキストのみ",
            "attr": "要素の全ての属性",
            "compl": "要素やHTMLコンテンツの属性オブジェクト"
        },
        "format": {
            "single": "配列化した1つのメッセージ",
            "multi": "要素毎の複数のメッセージ"
        }
    },
    "json": {
        "errors": {
            "dropped-object": "オブジェクト形式でないペイロードを無視しました",
            "dropped": "対応していない形式のペイロードを無視しました",
            "dropped-error": "ペイロードの変換処理が失敗しました",
            "schema-error": "JSONスキーマエラー",
            "schema-error-compile": "JSONスキーマエラー: スキーマのコンパイルが失敗しました"
        },
        "label": {
            "o2j": "オブジェクトからJSONへ変換",
            "pretty": "JSON文字列フォーマット",
            "action": "動作",
            "property": "プロパティ",
            "actions": {
                "toggle": "JSON文字列とオブジェクト間の相互変換",
                "str": "常にJSON文字列に変換",
                "obj": "常にJavaScriptオブジェクトに変換"
            }
        }
    },
    "yaml": {
        "errors": {
            "dropped-object": "オブジェクト形式でないペイロードを無視しました",
            "dropped": "対応していない形式のペイロードを無視しました",
            "dropped-error": "ペイロードの変換処理が失敗しました"
        }
    },
    "xml": {
        "label": {
            "represent": "XMLタグ属性を次のプロパティ名として表現",
            "prefix": "文字列を参照するための接頭辞",
            "advanced": "詳細設定",
            "x2o": "XMLからオブジェクトへ変換"
        },
        "errors": {
            "xml_js": "本ノードは、XML形式の文字列またはJSONのみ処理します"
        }
    },
    "file": {
        "label": {
            "write": "write file",
            "read": "read file",
            "filename": "ファイル名",
            "path": "パス",
            "action": "動作",
            "addnewline": "メッセージの入力のたびに改行を追加",
            "createdir": "ディレクトリが存在しない場合は作成",
            "outputas": "出力形式",
            "breakchunks": "チャンクへ分割",
            "breaklines": "行へ分割",
            "sendError": "エラーメッセージを送信(互換モード)",
            "encoding": "文字コード",
            "deletelabel": "delete __file__",
            "utf8String": "UTF8文字列",
            "utf8String_plural": "UTF8文字列",
            "binaryBuffer": "バイナリバッファ",
            "binaryBuffer_plural": "バイナリバッファ",
            "allProps": "各メッセージに既存の全プロパティを含める"
        },
        "action": {
            "append": "ファイルへ追記",
            "overwrite": "ファイルを上書き",
            "delete": "ファイルを削除"
        },
        "output": {
            "utf8": "文字列",
            "buffer": "バイナリバッファ",
            "lines": "行毎のメッセージ",
            "stream": "バッファのストリーム"
        },
        "status": {
            "wrotefile": "ファイルへ書き込みました: __file__",
            "deletedfile": "ファイルを削除しました: __file__",
            "appendedfile": "ファイルへ追記しました: __file__"
        },
        "encoding": {
            "none": "デフォルト",
            "setbymsg": "msg.encodingで設定",
            "native": "ネイティブ",
            "unicode": "UNICODE",
            "japanese": "日本",
            "chinese": "中国",
            "korean": "韓国",
            "taiwan": "台湾/香港",
            "windows": "Windowsコードページ",
            "iso": "ISOコードページ",
            "ibm": "IBMコードページ",
            "mac": "Macコードページ",
            "koi8": "KOI8コードページ",
            "misc": "その他"
        },
        "errors": {
            "nofilename": "ファイル名が設定されていません",
            "invaliddelete": "警告: 削除が無効です。設定ダイアログで特定の削除設定を使用してください",
            "deletefail": "ファイルの削除処理が失敗しました: __error__",
            "writefail": "ファイルの書き込み処理が失敗しました: __error__",
            "appendfail": "ファイルの追記処理が失敗しました: __error__",
            "createfail": "ファイルの作成処理が失敗しました: __error__"
        },
        "tip": "注釈: 「ファイル名」にフルパスを設定しない場合は、Node-REDプロセスの実行ディレクトリからの相対パスとなります。"
    },
    "split": {
        "split": "split",
        "intro": "型に基づいて <code>msg.payload</code> を分割:",
        "object": "<b>オブジェクト</b>",
        "objectSend": "各key/valueペアのメッセージを送信",
        "strBuff": "<b>文字列</b> / <b>バッファ</b>",
        "array": "<b>配列</b>",
        "splitThe": "に基づく",
        "splitUsing": "分割",
        "splitLength": "固定長",
        "stream": "メッセージのストリームとして処理",
        "addname": " keyのコピー先"
    },
    "join": {
        "join": "join",
        "mode": {
            "mode": "動作",
            "auto": "自動",
            "merge": "列のマージ",
            "reduce": "列の集約",
            "custom": "手動"
        },
        "combine": "結合",
        "completeMessage": "メッセージ全体",
        "create": "出力",
        "type": {
            "string": "文字列",
            "array": "配列",
            "buffer": "バッファ",
            "object": "key/valueオブジェクト",
            "merged": "結合オブジェクト"
        },
        "using": "使用する値",
        "key": "をキーとして使用",
        "joinedUsing": "連結文字",
        "send": "メッセージ送信:",
        "afterCount": "指定数のメッセージパーツを受信後",
        "useparts": "既存のmsg.partsプロパティを使用",
        "count": "合計値",
        "subsequent": "後続のメッセージ毎",
        "afterTimeout": "最初のメッセージ受信からのタイムアウト後",
        "seconds": "秒",
        "complete": "<code>msg.complete</code> プロパティが設定されたメッセージ受信後",
        "tip": "このモードでは、本ノードが <i>split</i> ノードと組となるか、 <code>msg.parts</code> プロパティが設定されたメッセージを受け取ることが前提となります。",
        "too-many": "joinノード内部で保持しているメッセージが多すぎます",
        "message-prop": "メッセージプロパティ",
        "merge": {
            "topics-label": "対象トピック",
            "topics": "トピック",
            "topic": "トピック",
            "on-change": "新規トピックを受け取るとメッセージを送信する"
        },
        "reduce": {
            "exp": "集約式",
            "exp-value": "式",
            "init": "初期値",
            "right": "評価を逆順に行う (最後から最初)",
            "fixup": "最終調整式"
        },
        "errors": {
            "invalid-expr": "JSONata式が不正: __error__",
            "invalid-type": "__error__ をバッファに連結できません"
        }
    },
    "sort": {
        "sort": "sort",
        "target": "対象",
        "seq": "メッセージ列",
        "key": "キー",
        "elem": "要素の値",
        "order": "順序",
        "ascending": "昇順",
        "descending": "降順",
        "as-number": "数値として比較",
        "invalid-exp": "sortノードで不正なJSONata式が指定されました: __message__",
        "too-many": "sortノードの未処理メッセージの数が許容数を超えました",
        "clear": "sortノードの未処理メッセージを破棄しました"
    },
    "batch": {
        "batch": "batch",
        "mode": {
            "label": "モード",
            "num-msgs": "メッセージ数でグループ化",
            "interval": "時間間隔でグループ化",
            "concat": "列の結合"
        },
        "count": {
            "label": "メッセージ数",
            "overlap": "オーバラップ",
            "count": "数",
            "invalid": "メッセージ数とオーバラップ数が不正"
        },
        "interval": {
            "label": "時間間隔",
            "seconds": "秒",
            "empty": "メッセージを受信しない場合、空のメッセージを送信"
        },
        "concat": {
            "topics-label": "トピック",
            "topic": "トピック"
        },
        "too-many": "batchノード内で保持しているメッセージが多すぎます",
        "unexpected": "想定外のモード",
        "no-parts": "メッセージにpartsプロパティがありません",
        "honourParts": "msg.partsを用いたbatch操作を許可",
        "error": {
            "invalid-count": "メッセージ数が不正",
            "invalid-overlap": "オーバラップが不正",
            "invalid-interval": "時間間隔が不正"
        }
    },
    "rbe": {
        "rbe": "filter",
        "label": {
            "func": "動作",
            "init": "初期値を送付",
            "start": "初期値",
            "name": "名前",
            "septopics": "個別に動作を適用",
            "gap": "変化量",
            "property": "プロパティ",
            "topic": "トピック"
        },
        "placeholder": {
            "bandgap": "例:10、5%",
            "start": "最初に受け取った値を用いる場合は空欄"
        },
        "opts": {
            "rbe": "値が変化した時のみメッセージを中継",
            "rbei": "値が変化した時のみメッセージを中継(初期値を無視)",
            "deadband": "値が指定した変化量を超える時のみメッセージを中継",
            "deadbandEq": "値が指定した変化量以上の時のみメッセージを中継",
            "narrowband": "値が指定した変化量を超えない時のみメッセージを中継",
            "narrowbandEq": "値が指定した変化量以上でない時のみメッセージを中継",
            "in": "最後の入力値と比較",
            "out": "最後の出力値と比較"
        },
        "warn": {
            "nonumber": "ペイロードに数値が含まれていません"
        }
    },
    "global-config": {
        "label": {
            "open-conf": "設定を開く"
        }
    }
}
