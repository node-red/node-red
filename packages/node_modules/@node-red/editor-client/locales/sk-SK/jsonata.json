{
    "$string": {
        "args": "arg[, prettify]",
        "desc": "Konvertuje parameter `arg` na reťazec pomocou nasledujúcich pravidiel typovania:\n\n - Reťazce zostávajú nezmenené\n - Funkcie sú konvertované na prázdny reťazec\n - Číselná nekonečnosť a NaN vrátia chybu, pretože ich nemožno reprezentovať ako číslo JSON\n - Všetky ostatné hodnoty sú konvertované na reťazec JSON pomocou funkcie `JSON.stringify`. Ak je `prettify` pravda, potom je generovaný \"prettified\" JSON, t.j. jeden riadok na pole a riadky budú odsadené podľa hĺbky poľa."
    },
    "$length": {
        "args": "str",
        "desc": "Vráti počet znakov v reťazci `str`. Chyba je vrátená, ak `str` nie je reťazec."
    },
    "$substring": {
        "args": "str, start[, length]",
        "desc": "Vráti reťazec obsahujúci znaky z prvého parametra `str` začínajúce na pozícii `start` (bez posunu). Ak je špecifikovaná `length`, potom podreťazec bude obsahovať maximálne `length` znakov. Ak je `start` záporný, potom udáva počet znakov od konca `str`."
    },
    "$substringBefore": {
         "args": "str, chars",
         "desc": "Vráti podreťazec pred prvým výskytom sekvencie znakov `chars` v `str`. Ak `str` neobsahuje `chars`, potom vráti `str`."
    },
    "$substringAfter": {
        "args": "str, chars",
        "desc": "Vráti podreťazec po prvom výskyte sekvencie znakov `chars` v `str`. Ak `str` neobsahuje `chars`, potom vráti `str`."
    },
    "$uppercase": {
        "args": "str",
        "desc": "Vráti reťazec so všetkými znakmi z `str` konvertovanými na veľké písmená."
    },
    "$lowercase": {
        "args": "str",
        "desc": "Vráti reťazec so všetkými znakmi z `str` konvertovanými na malé písmená."
    },
    "$trim": {
        "args": "str",
        "desc": "Normalizuje a odstraňuje všetky medzery v `str` aplikovaním nasledujúcich krokov:\n\n - Všetky tabulátory, návraty a nové riadky sú nahradené medzerami.\n- Súvislé sekvencie medzier sú zredukované na jednu medzeru.\n- Koncové a začiatočné medzery sú odstránené.\n\n Ak nie je špecifikovaný `str` (t.j. táto funkcia je vyvolaná bez argumentu), potom sa ako hodnota pre `str` použije kontextová hodnota. Chyba je vrátená, ak `str` nie je reťazec."
    },
    "$contains": {
        "args": "str, pattern",
        "desc": "Vráti `true`, ak `str` zodpovedá vzoru `pattern`, inak vráti `false`. Ak nie je špecifikovaný `str` (t.j. táto funkcia je vyvolaná s argumentom), potom sa ako hodnota pre `str` použije kontextová hodnota. Parameter `pattern` môže byť reťazec alebo regulárny výraz."
    },
    "$split": {
        "args": "str[, separator][, limit]",
        "desc": "Rozdelí parameter `str` na pole podreťazcov. Je chybou, ak nie je `str` reťazec. Voliteľný parameter `separator` špecifikuje znaky vo vnútri `str`, podľa ktorých má byť rozdelený na reťazec alebo regulárny výraz. Ak nie je špecifikovaný separator, predpokladá sa prázdny reťazec a str bude rozdelený na pole jednotlivých znakov. Je chybou, ak separator nie je reťazec. Voliteľný parameter limit je číslo, ktoré špecifikuje maximálny počet podreťazcov zahrnutých do výsledného poľa. Všetky ďalšie podreťazce sú ignorované. Ak nie je limit špecifikovaný, potom str je plne rozdelený bez obmedzenia veľkosti výsledného poľa. Je chybou, ak limit nie je nezáporné číslo."
    },
    "$join": {
        "args": "array[, separator]",
        "desc": "Spojí pole komponentných reťazcov do jedného zreťazeného reťazca, pričom každý komponentný reťazec je oddelený voliteľným parametrom separator. Je chybou, ak vstupné pole obsahuje prvok, ktorý nie je reťazcom. Ak separator nie je špecifikovaný, predpokladá sa prázdny reťazec, t.j. medzi komponentnými reťazcami nie je separator. Je chybou, ak separator nie je reťazcom."
    },
    "$match": {
        "args": "str, pattern [, limit]",
        "desc": "Aplikuje reťazec `str` na regulárny výraz `pattern` a vráti pole objektov, pričom každý objekt obsahuje informácie o každom výskyte zhody v `str`."
    },
    "$replace": {
        "args": "str, pattern, replacement [, limit]",
        "desc": "Nájde výskyty `pattern` v `str` a nahradí ich `replacement`.\n\nVoliteľný parameter `limit` určuje maximálny počet nahradení."
    },
    "$now": {
        "args": "$[picture [, timezone]]",
        "desc": "Generuje časovú pečiatku vo formáte kompatibilnom s ISO 8601 a vracia ju ako reťazec. Ak sú poskytnuté voliteľné parametre obrázka a časového pásma, aktuálna časová pečiatka sa formátuje podľa funkcie `$fromMillis()`"
    },
    "$base64encode": {
        "args": "string",
        "desc": "Konvertuje ASCII reťazec na reprezentáciu v base64. Každý znak v reťazci sa považuje za bajt binárnych dát. To vyžaduje, aby všetky znaky v reťazci boli v rozsahu od 0x00 do 0xFF, čo zahŕňa všetky znaky URI kódovaných reťazcov. Unicode znaky mimo tohto rozsahu nie sú podporované."
    },
    "$base64decode": {
        "args": "string",
        "desc": "Konvertuje bajty kódované base64 na reťazec pomocou Unicode UTF-8 kódovej stránky."
    },
    "$number": {
        "args": "arg",
        "desc": "Konvertuje parameter `arg` na číslo pomocou nasledujúcich pravidiel konverzie:\n\n - Čísla zostávajú nezmenené\n - Reťazce obsahujúce sekvenciu znakov predstavujúcich platné číslo JSON sú konvertované na toto číslo\n - Všetky ostatné hodnoty spôsobia chybu."
    },
    "$abs": {
        "args": "number",
        "desc": "Vráti absolútnu hodnotu parametra `number`."
    },
    "$floor": {
        "args": "number",
        "desc": "Vráti hodnotu `number` zaokrúhlenú nadol k najbližšiemu celému číslu menšiemu alebo rovnakému ako `number`."
    },
    "$ceil": {
        "args": "number",
        "desc": "Vráti hodnotu `number` zaokrúhlenú nahor k najbližšiemu celému číslu väčšiemu alebo rovnakému ako `number`."
    },
    "$round": {
        "args": "number [, precision]",
        "desc": "Vráti hodnotu parametra `number` zaokrúhlenú na počet desatinných miest špecifikovaných voliteľným parametrom `precision`."
    },
    "$power": {
        "args": "base, exponent",
        "desc": "Vráti hodnotu `base` umocnenú exponentom `exponent`."
    },
    "$sqrt": {
        "args": "number",
        "desc": "Vráti druhú odmocninu hodnoty parametra `number`."
    },
    "$random": {
        "args": "",
        "desc": "Vráti pseudo-náhodné číslo väčšie alebo rovné nule a menšie ako jedna."
    },
    "$millis": {
        "args": "",
        "desc": "Vráti počet milisekúnd od Unix epochy (1. januára 1970 UTC) vo forme čísla. Všetky volania `$millis()` pri vyhodnocovaní výrazu vrátia rovnakú hodnotu."
    },
    "$sum": {
        "args": "array",
        "desc": "Vráti aritmetický súčet `poľa` čísel. Je chybou, ak vstupné pole obsahuje prvok, ktorý nie je číslo."
    },
    "$max": {
        "args": "array",
        "desc": "Vráti maximálne číslo v `poli` čísel. Je chybou, ak vstupné pole obsahuje prvok, ktorý nie je číslo."
    },
    "$min": {
        "args": "array",
        "desc": "Vráti minimálne číslo v `poli` čísel. Je chybou, ak vstupné pole obsahuje prvok, ktorý nie je číslo."
    },
    "$average": {
        "args": "array",
        "desc": "Vráti priemernú hodnotu `poľa` čísel. Je chybou, ak vstupné pole obsahuje prvok, ktorý nie je číslo."
    },
    "$boolean": {
        "args": "arg",
        "desc": "Transformuje argument na booleovskú hodnotu pomocou nasledujúcich pravidiel:\n\n - `Boolean`: nezmenený\n - `string`: prázdny: `false`\n - `string`: neprázdny: `true`\n - `number`: `0`: `false`\n - `number`: nenulový: `true`\n - `null`: `false`\n - `array`: prázdny: `false`\n - `array`: obsahuje prvok, ktorý sa konvertuje na `true`: `true`\n - `array`: všetky prvky sa konvertujú na `false`: `false`\n - `object`: prázdny: `false`\n - `object`: neprázdny: `true`\n - `function`: `false`"
    },
    "$not": {
        "args": "arg",
        "desc": "Vráti booleovský výsledok logickej negácie argumentu"
    },
    "$exists": {
        "args": "arg",
        "desc": "Vráti booleovskú hodnotu `true`, ak je výraz `arg` vyhodnotený na hodnotu, alebo `false`, ak výraz nezodpovedá ničomu (napríklad cesta k neexistujúcej referencii poľa)."
    },
    "$count": {
        "args": "array",
        "desc": "Vráti počet prvkov v poli"
    },
    "$append": {
        "args": "array, array",
        "desc": "Kombinuje dve polia"
    },
    "$sort": {
        "args": "array [, function]",
        "desc": "Vráti pole obsahujúce všetky hodnoty parametra `array`, ale zoradené v poradí.\n\nAk je poskytnutá porovnávacia funkcia, musí to byť funkcia, ktorá prijíma dva parametre:\n\n`function(left , right)`\n\nTáto funkcia je volaná algoritmom triedenia na porovnanie dvoch hodnôt left a right. Ak má byť hodnota left umiestnená za hodnotou right v požadovanom poradí triedenia, funkcia musí vrátiť booleovskú hodnotu true na označenie výmeny. Inak musí vrátiť false."
    },
    "$reverse": {
        "args": "array",
        "desc": "Vráti pole obsahujúce všetky hodnoty parametra `array`, ale v opačnom poradí."
    },
    "$shuffle": {
        "args": "array",
        "desc": "Vráti pole obsahujúce všetky hodnoty parametra `array`, ale premiešané v náhodnom poradí."
    },
    "$zip": {
        "args": "array, ...",
        "desc": "Vráti zložené (zazipované) pole obsahujúce zoskupené polia hodnôt z argumentov `array1`...`arrayN` indexov 0, 1, 2...."
    },
    "$keys": {
        "args": "object",
        "desc": "Vráti pole obsahujúce kľúče objektu. Ak je argumentom pole objektov, vrátené pole obsahuje deduplikovaný zoznam všetkých kľúčov zo všetkých objektov."
    },
    "$lookup": {
        "args": "object, key",
        "desc": "Vráti hodnotu priradenú kľúču v objekte. Ak je prvým argumentom pole objektov, všetky objekty v poli sú prehľadávané a vrátia sa hodnoty priradené ku všetkým výskytom kľúča."
    },
    "$spread": {
        "args": "object",
        "desc": "Rozdelí objekt obsahujúci páry kľúč/hodnota na pole objektov, pričom každý má jeden pár kľúč/hodnota z vstupného objektu. Ak je parameter polom objektov, potom výsledné pole obsahuje jeden objekt pre každý pár kľúč/hodnota v každom objekte dodanom poli."
    },
    "$merge": {
        "args": "array<object>",
        "desc": "Zlúči pole 'objektov' do jedného 'objektu', ktorý obsahuje všetky páry kľúč/hodnota z každého objektu vstupného poľa. Ak niektorý z vstupných objektov obsahuje rovnaký kľúč, potom vrátený 'objekt' bude obsahovať hodnotu posledného v poli. Je chybou, ak vstupné pole obsahuje prvok, ktorý nie je objekt."
    },
    "$sift": {
        "args": "object, function",
        "desc": "Vráti objekt, ktorý obsahuje iba páry kľúč/hodnota z parametra `object`, ktoré spĺňajú predikát `function` prenesený ako druhý parameter.\n\nFunkcia, ktorá je poskytnutá ako druhý parameter, musí mať nasledujúcu signatúru:\n\n`function(value [, key [, object]])`"
    },
    "$each": {
        "args": "object, function",
        "desc": "Vráti pole obsahujúce hodnoty vrátené funkciou, keď je aplikovaná na každý pár kľúč/hodnota v `objekte`."
    },
    "$map": {
        "args": "array, function",
        "desc": "Vráti pole obsahujúce výsledky aplikácie parametra `function` na každú hodnotu parametra `array`.\n\nFunkcia poskytnutá ako druhý parameter musí mať nasledujúcu signatúru:\n\n`function(value [, index [, array]])`"
    },
    "$filter": {
        "args": "array, function",
        "desc": "Vráti pole obsahujúce iba hodnoty parametra `array`, ktoré spĺňajú predikát `function`.\n\nFunkcia poskytnutá ako druhý parameter musí mať nasledujúcu signatúru:\n\n`function(value [, index [, array]])`"
    },
    "$reduce": {
        "args": "array, function [, init]",
        "desc": "Vráti agregovanú hodnotu odvodenú z postupnej aplikácie parametra `function` na každú hodnotu v `array` v kombinácii s výsledkom predchádzajúcej aplikácie funkcie.\n\nFunkcia musí akceptovať dva argumenty a správa sa ako infixový operátor medzi každou hodnotou v `poli`. Signatúra funkcie musí byť vo forme: `myfunc($accumulator, $value[, $index[, $array]])`\n\nVoliteľný parameter `init` sa používa ako počiatočná hodnota v agregácii."
    },
    "$flowContext": {
        "args": "string[, string]",
        "desc": "Získa vlastnosť kontextu toku.\n\nToto je funkcia definovaná Node-RED."
    },
    "$globalContext": {
        "args": "string[, string]",
        "desc": "Získa globálnu vlastnosť kontextu.\n\nToto je funkcia definovaná Node-RED."
    },
    "$pad": {
        "args": "string, width [, char]",
        "desc": "Vráti kópiu `reťazca` s dodatočným vyplnením, ak je to potrebné, tak aby jeho celkový počet znakov zodpovedal aspoň absolútnej hodnote parametra `width`.\n\nAk je `width` kladné číslo, potom je reťazec vyplnený doprava; ak je záporné, je vyplnené doľava.\n\nVoliteľný argument `char` špecifikuje znak(y) vyplnenia, ktoré sa majú použiť. Ak nie je špecifikovaný, predvolená hodnota je znak medzery."
    },
    "$fromMillis": {
        "args": "number, [, picture [, timezone]]",
        "desc": "Konvertuje `number` predstavujúci milisekundy od Unix epochy (1. januára 1970 UTC) na reťazcovú reprezentáciu časovej pečiatky, ako je špecifikované reťazcom obrázka.\n\nAk je voliteľný parameter „obrázok“ vynechaný, časová pečiatka je formátovaná vo formáte ISO 8601.\n\nAk je poskytnutý voliteľný reťazec `image`, časová pečiatka je formátovaná podľa reprezentácie špecifikovanej v tomto reťazci. Správanie tejto funkcie je konzistentné s dvojargumentovou verziou funkcie XPath/XQuery `format-dateTime`, ako je definované v špecifikácii XPath F&O 3.1. Reťazcový parameter obrázka definuje spôsob, akým je časová pečiatka formátovaná a má rovnakú syntax ako `format-dateTime`.\n\nAk je poskytnutý voliteľný reťazec `timezone`, potom bude formátovaná časová pečiatka v tomto časovom pásme. Reťazec `timezone` musí byť vo formáte '±HHMM', kde ± je plus alebo mínus a HHMM je posun v hodinách a minútach od UTC. Pozitívny posun pre časové pásma na východ od UTC, negatívny posun pre časové pásma na západ od UTC."
    },
    "$formatNumber": {
        "args": "number, picture [, options]",
        "desc": "Konvertuje `number` na reťazec a formátuje ho na desiatkovú reprezentáciu, ako je špecifikované reťazcom `picture`.\n\n Správanie tejto funkcie je konzistentné s funkciou XPath/XQuery `fn:format-number`, ako je definované v špecifikácii XPath F&O 3.1. Reťazcový parameter obrázka definuje spôsob, akým je číslo formátované a má rovnakú syntax ako `fn:format-number`.\n\nTretí voliteľný argument `options` sa používa na nahradenie predvolených znakov špecifických pre miestne nastavenia, ako napríklad desatinný oddeľovač. Ak je poskytnutý, tento argument musí byť objekt obsahujúci páry názov/hodnota špecifikované v sekcii desiatkového formátu špecifikácie XPath F&O 3.1."
    },
    "$formatBase": {
        "args": "number [, radix]",
        "desc": "Konvertuje `number` na reťazec a formátuje ho ako celé číslo reprezentované v číselnej základni špecifikovanej argumentom `radix`. Ak nie je radix špecifikovaný, predvolená hodnota je základňa 10. Radix môže byť medzi 2 a 36, inak sa vráti chyba."
    },
    "$toMillis": {
        "args": "timestamp",
        "desc": "Konvertuje reťazec `timestamp` vo formáte ISO 8601 na počet milisekúnd od Unix epochy (1. januára 1970 UTC) vo forme čísla. Chyba sa vráti, ak reťazec nie je v správnom formáte."
    },
    "$env": {
        "args": "arg",
        "desc": "Vráti hodnotu premennej prostredia.\n\nToto je funkcia definovaná Node-RED."
    },
    "$eval": {
        "args": "expr [, context]",
        "desc": "Analyzuje a vyhodnocuje reťazec `expr`, ktorý obsahuje JSON literál alebo výraz JSONata pomocou aktuálneho kontextu ako kontextu vyhodnotenia."
    },
    "$formatInteger": {
        "args": "number, picture",
        "desc": "Transformuje `number` na reťazec a formátuje ho na celočíselnú reprezentáciu, ako je špecifikované reťazcom `image`. Reťazcový parameter obrázka definuje spôsob, akým je číslo formátované a má rovnakú syntax ako `fn:format-integer` zo špecifikácie XPath F&O 3.1."
    },
    "$parseInteger": {
        "args": "string, picture",
        "desc": "Analyzuje obsah parametra `string` na celé číslo (ako číslo JSON) pomocou formátu špecifikovaného reťazcom `picture`. Reťazcový parameter `picture` má rovnaký formát ako `$formatInteger`."
    },
    "$error": {
        "args": "[str]",
        "desc": "Generuje chybu so správou. Voliteľný `str` nahradí predvolenú správu funkcie `$error()`."
    },
    "$assert": {
        "args": "arg, str",
        "desc": "Ak je `arg` pravda, funkcia vráti undefined. Ak je `arg` nepravda, vyvolá sa výnimka so správou `str` ako správa výnimky."
    },
    "$single": {
        "args": "array, function",
        "desc": "Vráti jedinú hodnotu parametra `array`, ktorá spĺňa predikát `function` (t.j. funkcia vráti booleovskú hodnotu `true`, keď je prenesená na hodnotu). Vyvolá výnimku, ak počet zodpovedajúcich hodnôt nie je presne jedna.\n\nFunkcia musí byť poskytnutá v nasledujúcej signatúre: `function(value [, index [, array]])`, kde value je každá položka poľa, index je pozícia tejto hodnoty a celé pole je prenesené ako tretí argument."
    },
    "$encodeUrlComponent": {
        "args": "str",
        "desc": "Kóduje komponent URL (Uniform Resource Locator) nahradením každej inštancie určitých znakov jednou, dvoma, tromi alebo štyrmi únikovými sekvenciami predstavujúcimi UTF-8 kódovanie znaku.\n\nPríklad: `$encodeUrlComponent(\"?x=test\")` => `\"%3Fx%3Dtest\"`"
    },
    "$encodeUrl": {
        "args": "str",
        "desc": "Kóduje URL (Uniform Resource Locator) nahradením každej inštancie určitých znakov jednou, dvoma, tromi alebo štyrmi únikovými sekvenciami predstavujúcimi UTF-8 kódovanie znaku.\n\nPríklad: `$encodeUrl(\"https://mozilla.org/?x=шеллы\")` => `\"https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\"`"
    },
    "$decodeUrlComponent": {
        "args": "str",
        "desc": "Dekóduje komponent URL (Uniform Resource Locator) predtým vytvorený pomocou encodeUrlComponent.\n\nPríklad: `$decodeUrlComponent(\"%3Fx%3Dtest\")` => `\"?x=test\"`"
    },
    "$decodeUrl": {
        "args": "str",
        "desc": "Dekóduje URL (Uniform Resource Locator) predtým vytvorenú pomocou encodeUrl.\n\nPríklad: `$decodeUrl(\"https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\")` => `\"https://mozilla.org/?x=шеллы\"`"
    },
    "$distinct": {
        "args": "array",
        "desc": "Vráti pole s duplicitnými hodnotami odstránenými z `array`"
    },
    "$type": {
        "args": "value",
        "desc": "Vráti typ `value` ako reťazec. Ak `value` nie je definovaná, vráti `undefined`."    },
    "$moment": {
        "args": "[str]",
        "desc": "Získa objekt dátumu pomocou knižnice Moment."
    },
    "$clone": {
        "args": "hodnota",
        "desc": "Bezpečne klonovať objekt."
    }
}
