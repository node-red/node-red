RED.chatbot = (function() {
    var content = null;
    var chatContainer = null;
    var messageContainer = null;
    var inputContainer = null;
    var chatHistory = [];
    var isProcessing = false;
    var apiKeyContainer = null;

    function checkApiKey() {
        // Check localStorage for an API key
        var apiKey = localStorage.getItem('node-red-openai-api-key');
        return apiKey && apiKey.trim().length > 0;
    }

    function saveApiKey(apiKey) {
        // Save API key to localStorage
        localStorage.setItem('node-red-openai-api-key', apiKey);
        // Update the key in the OpenAI service
        RED.openAIService.updateApiKey(apiKey);
    }

    function createApiKeyInput() {
        apiKeyContainer = $('<div class="red-ui-chatbot-api-key-container"></div>');
        
        // Style the container for centering
        apiKeyContainer.css({
            'display': 'flex',
            'flex-direction': 'column',
            'justify-content': 'center',
            'align-items': 'center',
            'position': 'absolute',
            'top': '0',
            'left': '0',
            'width': '100%',
            'height': '100%',
            'background-color': 'rgba(40, 40, 40, 0.7)',
            'z-index': '10'
        });
        
        // Create a centered card container
        var card = $('<div class="red-ui-chatbot-api-key-card"></div>').appendTo(apiKeyContainer);
        card.css({
            'display': 'flex',
            'flex-direction': 'column',
            'align-items': 'center',
            'justify-content': 'center',
            'padding': '30px',
            'background-color': '#2c2c2c',
            'border-radius': '8px',
            'width': '80%',
            'max-width': '400px'
        });
        
        var title = $('<h3>OpenAI API Key Required</h3>').appendTo(card);
        title.css({
            'margin-bottom': '15px',
            'font-size': '15px',
            'color': '#fff'
        });
        
        var description = $('<p>Please enter your OpenAI API key to use the Nerco AI Assistant.</p>').appendTo(card);
        description.css({
            'margin-bottom': '25px',
            'color': '#aaa',
            'text-align': 'center'
        });
        
        var inputGroup = $('<div class="red-ui-chatbot-api-key-input-group"></div>').appendTo(card);
        inputGroup.css({
            'display': 'flex',
            'flex-direction': 'column',
            'gap': '10px',
            'width': '100%',
            'align-items': 'center'
        });
        
        var apiKeyInput = $('<input type="password" class="red-ui-chatbot-api-key-input" placeholder="Enter your OpenAI API key...">').appendTo(inputGroup);
        apiKeyInput.css({
            'flex': '1',
            'padding': '10px',
            'border': '1px solid #444',
            'border-radius': '4px',
            'background-color': '#333',
            'color': '#fff'
        });
        
        var saveButton = $('<button class="red-ui-button">Save Key</button>').appendTo(inputGroup);
        saveButton.css({
            'white-space': 'nowrap',
            'background-color': '#1177bb',
            'border': 'none',
            'color': 'white',
            'border-radius': '4px',
            'cursor': 'pointer',
            'text-align': 'center',
            'width': '100px'
        });
        
        saveButton.on('click', function() {
            var apiKey = apiKeyInput.val().trim();
            if (apiKey.length > 0) {
                saveApiKey(apiKey);
                // Remove API key input and show chat interface
                apiKeyContainer.remove();
                chatContainer.show();
                // Add welcome message
            }
        });
        
        return apiKeyContainer;
    }

    function createChatbotContent() {
        content = $('<div class="red-ui-chatbot"></div>');
        
        // Create the chat container
        chatContainer = $('<div class="red-ui-chatbot-container"></div>').appendTo(content);
        messageContainer = $('<div class="red-ui-chatbot-messages"></div>').appendTo(chatContainer);
        
        // Add welcome message
        addSystemMessage("Hi ðŸ‘‹ I can help you create flows or answer questions about Node-RED. Ask me anything or describe a flow you'd like to build.");
        
        // Input area
        inputContainer = $('<div class="red-ui-chatbot-input"></div>').appendTo(chatContainer);
        var textarea = $('<textarea class="red-ui-chatbot-textarea" placeholder="Ask a question or describe a flow you want to create..."></textarea>').appendTo(inputContainer);
        var buttonContainer = $('<div class="red-ui-chatbot-buttons"></div>').appendTo(inputContainer);
        var sendButton = $('<button class="red-ui-button red-ui-chatbot-send">Send</button>').appendTo(buttonContainer);
        
        // Event handlers
        textarea.on('keydown', function(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        });
        
        sendButton.on('click', function() {
            sendMessage();
        });
        
        function sendMessage() {
            if (isProcessing) return;
            
            var message = textarea.val().trim();
            if (message.length === 0) return;
            
            addUserMessage(message);
            textarea.val('');
            
            // Process the message
            processUserMessage(message);
        }
        
        // If no API key, hide chat and show API key input
        if (!checkApiKey()) {
            chatContainer.hide();
            content.prepend(createApiKeyInput());
        }
        
        return content;
    }
    
    function addUserMessage(message) {
        var userMessage = $('<div class="red-ui-chatbot-message red-ui-chatbot-message-user"></div>')
            .appendTo(messageContainer);
        $('<div class="red-ui-chatbot-message-text"></div>')
            .text(message)
            .appendTo(userMessage);
        
        chatHistory.push({ role: 'user', content: message });
        scrollToBottom();
    }
    
    function addSystemMessage(message) {
        var systemMessage = $('<div class="red-ui-chatbot-message red-ui-chatbot-message-system"></div>')
            .appendTo(messageContainer);
        
        // For debugging - log the raw message and parsed content
        var parsedContent = marked(message);
        
        $('<div class="red-ui-chatbot-message-text"></div>')
            .html(parsedContent)
            .appendTo(systemMessage);
        
        if (message !== "Welcome to Node-RED Assistant! I can help you create flows or answer questions about Node-RED. Ask me anything or describe a flow you'd like to build.") {
            chatHistory.push({ role: 'assistant', content: message });
        }
        scrollToBottom();
    }
    
    function addFlowMessage(flowJson, flowDescription) {
        var flowMessage = $('<div class="red-ui-chatbot-message red-ui-chatbot-message-flow"></div>')
            .appendTo(messageContainer);
        
        // Parse markdown and log for debugging
        var parsedContent = marked(flowDescription);
        
        $('<div class="red-ui-chatbot-message-text"></div>')
            .html(parsedContent)
            .appendTo(flowMessage);
        
        var flowActionContainer = $('<div class="red-ui-chatbot-flow-actions"></div>')
            .appendTo(flowMessage);
        
        $('<button class="red-ui-button red-ui-button-small">Insert Flow</button>')
            .on('click', function() {
                insertFlow(flowJson);
            })
            .appendTo(flowActionContainer);
        
        scrollToBottom();
    }
    
    function scrollToBottom() {
        messageContainer.scrollTop(messageContainer[0].scrollHeight);
    }

    function processUserMessage(message) {
        isProcessing = true;

        
        // Show typing indicator
        var processingMessage = $('<div class="red-ui-chatbot-message red-ui-chatbot-message-system red-ui-chatbot-message-typing"></div>')
            .appendTo(messageContainer);
        $('<div class="red-ui-chatbot-message-text">Thinking...</div>')
            .appendTo(processingMessage);
        scrollToBottom();
        
        // Get available node types for context
        const allNodeTypes = RED.nodes.registry.getNodeDefinitions();
        
        // Filter node types to only include specific types or viso category
        const filteredNodeTypes = {};
        const targetTypes = new Set(["inject", "function", "switch", "change", "delay", "filter", "mqtt out", "http request", "join"]);
        
        Object.values(allNodeTypes).forEach(nodeDef => {
            const nodeType = nodeDef.type;
            const isTargetType = targetTypes.has(nodeType);
            const isVisoCategory = nodeDef.category === 'viso';
            
            if (isTargetType || isVisoCategory) {
                // Use the numeric ID as the key to maintain the original structure
                const nodeId = Object.keys(allNodeTypes).find(key => allNodeTypes[key] === nodeDef);
                if (nodeId) {
                    filteredNodeTypes[nodeId] = nodeDef;
                }
            }
        });
        
        const activeTabId = RED.workspaces.active();
        const nodesInWorkspace = RED.nodes.filterNodes({z: activeTabId});
        exportable_json = RED.nodes.createCompleteNodeSet({});

        filtered_exportable_json = exportable_json.filter(node => {

            if (nodesInWorkspace.find(n => n.id === node.id)) {
                return true;
            }
            return false;
        })

        // Get the response from OpenAI service with safe copies
        RED.openAIService.processMessage(message, chatHistory, filteredNodeTypes, filtered_exportable_json)
            .then(function(result) {
                console.log(result, "result");
                processingMessage.remove();
                
                if (result.success) {
                    if (result.isFlow) {
                        // Add the flow message with insert action
                        addFlowMessage(result.flow, result.description);
                        
                        // Add to chat history
                        chatHistory.push({ 
                            role: 'assistant', 
                            content: result.description 
                        });
                    } 
                    else if (result.isUpdate) {
                        // Add update flow response
                        updateFlowMessage(result.flow, result.description, result.changes, activeTabId);
                    }
                    else {
                        // Add normal conversation response
                        addSystemMessage(result.content);
                    }
                } else {
                    // Add error message
                    addSystemMessage("I'm sorry, an error occurred: " + (result.error || "Unknown error"));
                }
                
                isProcessing = false;
            })
            .catch(function(error) {
                processingMessage.remove();
                console.error("Error processing message:", error);
                addSystemMessage("I'm sorry, an error occurred while processing your message. Please try again later: " + error);
                isProcessing = false;
            });
    }

    function insertFlow(flowJson) {
        // Convert the flow to the format expected by Node-RED
        // Use RED.view to import the nodes at the current mouse position
        console.log(flowJson, "flowJson");

        change_ids(flowJson);
        RED.view.importNodes(flowJson, {
            addFlow: false,
            touchImport: false,
            generateIds: false,
            generateDefaultNames: false
        });
        
        // Add confirmation message
        addSystemMessage("Flow has been added to the workspace!");
    }

    function change_ids(flowJson) {
        current_ids_to_new_ids = {};
        for (var i = 0; i < flowJson.length; i++) {
            current_ids_to_new_ids[flowJson[i].id] = RED.nodes.id();
        }
        for (var i = 0; i < flowJson.length; i++) {
            flowJson[i].id = current_ids_to_new_ids[flowJson[i].id];
            if (flowJson[i].wires !== undefined) {
                if (flowJson[i].wires.length > 0 && Array.isArray(flowJson[i].wires[0])) {
                    // Handle nested array case
                    for (var j = 0; j < flowJson[i].wires.length; j++) {
                        for (var k = 0; k < flowJson[i].wires[j].length; k++) {
                            flowJson[i].wires[j][k] = current_ids_to_new_ids[flowJson[i].wires[j][k]];
                        }
                    }
                } else {
                    // Handle flat array case
                    for (var j = 0; j < flowJson[i].wires.length; j++) {
                        flowJson[i].wires[j] = current_ids_to_new_ids[flowJson[i].wires[j]];
                    }
                }
            }
        }
    }

    function updateFlowMessage(flow, description, changes, activeTabId) {
        var flowMessage = $('<div class="red-ui-chatbot-message red-ui-chatbot-message-flow"></div>')
            .appendTo(messageContainer);
        var parsedContent = marked(description);
        // Add general explanation
        $('<div class="red-ui-chatbot-message-text"></div>')
            .html(parsedContent)
            .appendTo(flowMessage);

        // Add changes list
        var changesList = $('<div class="red-ui-chatbot-changes-list"></div>')
            .appendTo(flowMessage);
        
        // Process each change
        changes.forEach(function(change) {
            var changeItem = $('<div class="red-ui-chatbot-change-item"></div>')
                .appendTo(changesList);
            
            // Add colored dot based on change type
            var dotColor;
            switch(change.operation) {
                case 'add':
                    dotColor = '#2ecc71'; // green
                    break;
                case 'remove':
                    dotColor = '#e74c3c'; // red
                    break;
                case 'modify':
                    dotColor = '#f1c40f'; // orange
                    break;
            }
            
            $('<span class="red-ui-chatbot-change-dot"></span>')
                .css({
                    'background-color': dotColor,
                    'display': 'inline-block',
                    'width': '8px',
                    'height': '8px',
                    'border-radius': '50%',
                    'margin-right': '8px'
                })
                .appendTo(changeItem);
            
            // Add change explanation
            $('<span></span>')
                .text(change.description)
                .appendTo(changeItem);
        });
        
        var flowActionContainer = $('<div class="red-ui-chatbot-flow-actions"></div>')
            .appendTo(flowMessage);
        
        // Add update button
        $('<button class="red-ui-button red-ui-button-small">Update Flow</button>')
            .on('click', function() {
                updateFlow(flow, changes, activeTabId);
            })
            .appendTo(flowActionContainer);
        
        scrollToBottom();
    }

    function updateFlow(flow, changes, activeTabId) {
        // Get all nodes in current workspace
        const nodesInWorkspace = RED.nodes.filterNodes({z: activeTabId});
        
        // Create a promise chain for sequential execution with delays
        Promise.resolve()
            .then(() => {
                RED.actions.invoke("core:select-all-nodes");
                return new Promise(resolve => setTimeout(resolve, 100));
            })
            .then(() => {
                RED.actions.invoke("core:delete-selection");
                return new Promise(resolve => setTimeout(resolve, 100));
            })
            .then(() => {
                // Import the new nodes
                flow.forEach(node => {
                    if (node.wires.length > 0 && Array.isArray(node.wires[0])) {
                        // Before flattening, store the original number of outputs
                        node.wires = [].concat(...node.wires);
                        node.outputs = node.wires.length;
                    } else {
                        // For non-nested wires, set outputs to 1 if there are any wires
                        node.outputs = node.wires.length
                    }
                    node.x = Number(node.x) + 100;
                    node.y = Number(node.y) + 100;
                });

                // Import with new IDs
                RED.view.importNodes(flow, {
                    addFlow: false,
                    touchImport: false,
                    generateIds: false,
                });
                return new Promise(resolve => setTimeout(resolve, 100));
            })
            .then(() => {
                // RED.actions.invoke("core:select-all-nodes");
                return new Promise(resolve => setTimeout(resolve, 100));
            })
            .then(() => {
                RED.actions.invoke("core:distribute-selection-horizontally");
                return new Promise(resolve => setTimeout(resolve, 100));
            })
            .then(() => {
                addSystemMessage("Flow has been updated!");
            });
    }

    function init() {
        // Initialize the OpenAI service
        RED.openAIService.init();

        // Create tab content
        var sidebarContent = createChatbotContent();
        
        // Add the tab to the sidebar
        RED.sidebar.addTab({
            id: "chatbot",
            label: "Assistant",
            name: "AI Assistant",
            content: sidebarContent,
            iconClass: "fa fa-comments",
            enableOnEdit: true
        });

        // Update the tab order to place the chatbot tab first
        var currentOrder = RED.settings.get("editor.sidebar.order", ["info", "help", "version-control", "debug"]);
        var newOrder = ["chatbot"].concat(currentOrder.filter(id => id !== "chatbot"));
        RED.settings.set("editor.sidebar.order", newOrder);

        // Show the chatbot tab
        RED.sidebar.show("chatbot");
    }

    return {
        init: init
    };
})(); 
